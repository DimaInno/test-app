{"mappings":"ACsCA,SAAS,eACP,IAAM,EAAQ,SAAS,gBAAgB,CAAC,SAClC,EAAc,AAAqB,GAArB,OAAO,WAAW,CAChC,EAAS,SAAS,gBAAgB,CAAC,UACnC,EAAe,OAAO,WAAW,CAAG,CAEvC,CAAA,EAAO,MAAM,CAAG,GACjB,EAAO,OAAO,CAAC,AAAA,IAGT,AAFa,EAAM,qBAAqB,GAAG,GAAG,CAEnC,EACb,EAAM,SAAS,CAAC,GAAG,CAAC,UAEpB,EAAM,SAAS,CAAC,MAAM,CAAC,SAE3B,GAGC,EAAM,MAAM,CAAG,GAChB,EAAM,OAAO,CAAC,AAAA,IAGR,AAFY,EAAK,qBAAqB,GAAG,GAAG,CAElC,EACZ,EAAK,SAAS,CAAC,GAAG,CAAC,WAEnB,EAAK,SAAS,CAAC,MAAM,CAAC,UAE1B,EAEJ,CAnEA,SAAS,gBAAgB,CAAC,mBAAoB,KAC5C,IAAM,EAAY,SAAS,aAAa,CAAC,iCACnC,EAAc,SAAS,cAAc,CAAC,qBAE5C,SAAS,IACP,IAAM,EAAiB,SAAS,aAAa,CAAC,sBAAsB,YAAY,CAC1E,EAAQ,SAAS,gBAAgB,CAAC,qBAClC,EAAY,CAAK,CAAC,EAAE,CAEpB,EAAe,SADE,OAAO,gBAAgB,CAAC,GAAW,YAAY,CACxB,GAC9C,CAAA,EAAU,KAAK,CAAC,MAAM,CAAG,CAAA,EAAG,EAAiB,CAAK,CAAC,EAAM,MAAM,CAAG,EAAE,CAAC,YAAY,CAAC,EAAI,CAAK,CAAC,EAAE,CAAC,YAAY,CAAC,EAAI,EAAe,CAAA,AAAA,CAAA,EAAM,MAAM,CAAG,CAAA,EAAG,CAAA,EAAG,EAAE,CAAC,CACvJ,IAAM,EAAgB,EAAU,qBAAqB,GAC/C,EAAe,OAAO,WAAW,CAEjC,EAAa,EAAc,GAAG,CAAG,EAAe,EAChD,EAAW,EAAc,MAAM,CAAG,EAAe,EAEnD,EAAW,EAMb,EAJE,GAAc,GAAK,GAAY,EAItB,KAAK,GAAG,CAAC,KAAK,GAAG,CAD5B,EAAY,AAFK,KAAK,GAAG,CAAC,GACF,EAAc,MAAM,CACF,IACH,GAAI,KAEhC,IADF,CAAA,EAAW,CAAA,EAMtB,EAAY,KAAK,CAAC,MAAM,CAAG,CAAA,EAAG,EAAS,CAAC,CAAC,AAC3C,CAEA,OAAO,gBAAgB,CAAC,SAAU,GAClC,OAAO,gBAAgB,CAAC,SAAU,GAClC,GACF,GAiCA,OAAO,gBAAgB,CAAC,OAAQ,cAChC,OAAO,gBAAgB,CAAC,SAAU","sources":["<anon>","src/js/index.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', ()=>{\n    const container = document.querySelector('.main__cards-scroll-container');\n    const progressBar = document.getElementById('scrollProgressBar');\n    function updateProgressBar() {\n        const containerHeght = document.querySelector('.main__cards-items').offsetHeight;\n        const cards = document.querySelectorAll('.main__cards-item');\n        const firstCard = cards[0];\n        const computedStyles = window.getComputedStyle(firstCard).marginBottom;\n        const numericValue = parseInt(computedStyles, 10);\n        container.style.height = `${containerHeght - cards[cards.length - 1].offsetHeight / 2 - cards[0].offsetHeight / 2 - numericValue * ((cards.length - 1) / 2)}px`;\n        const containerRect = container.getBoundingClientRect();\n        const windowHeight = window.innerHeight;\n        const startPoint = containerRect.top - windowHeight / 2;\n        const endPoint = containerRect.bottom - windowHeight / 2;\n        let progress = 0;\n        if (startPoint <= 0 && endPoint >= 0) {\n            const scrolled = Math.abs(startPoint);\n            const visibleDistance = containerRect.height;\n            progress = scrolled / visibleDistance * 100;\n            progress = Math.min(Math.max(progress, 0), 100);\n        } else if (endPoint < 0) progress = 100;\n        else progress = 0;\n        progressBar.style.height = `${progress}%`;\n    }\n    window.addEventListener('scroll', updateProgressBar);\n    window.addEventListener('resize', updateProgressBar);\n    updateProgressBar();\n});\nfunction animateCards() {\n    const cards = document.querySelectorAll('.card');\n    const triggerCard = window.innerHeight * 0.8;\n    const labels = document.querySelectorAll('.label');\n    const triggerLabel = window.innerHeight / 2;\n    if (labels.length > 0) labels.forEach((label)=>{\n        const labelTop = label.getBoundingClientRect().top;\n        if (labelTop < triggerLabel) label.classList.add('filled');\n        else label.classList.remove('filled');\n    });\n    if (cards.length > 0) cards.forEach((card)=>{\n        const cardTop = card.getBoundingClientRect().top;\n        if (cardTop < triggerCard) card.classList.add('visible');\n        else card.classList.remove('visible');\n    });\n}\nwindow.addEventListener('load', animateCards);\nwindow.addEventListener('scroll', animateCards);\n\n//# sourceMappingURL=test-app.65d2b486.js.map\n","document.addEventListener('DOMContentLoaded', () => {\n  const container = document.querySelector('.main__cards-scroll-container');\n  const progressBar = document.getElementById('scrollProgressBar');\n\n  function updateProgressBar() {\n    const containerHeght = document.querySelector('.main__cards-items').offsetHeight;\n    const cards = document.querySelectorAll('.main__cards-item');\n    const firstCard = cards[0];\n    const computedStyles = window.getComputedStyle(firstCard).marginBottom;\n    const numericValue = parseInt(computedStyles, 10);\n    container.style.height = `${containerHeght - cards[cards.length - 1].offsetHeight/2 - cards[0].offsetHeight/2 - numericValue*((cards.length - 1)/2)}px`;\n    const containerRect = container.getBoundingClientRect();\n    const windowHeight = window.innerHeight;\n\n    const startPoint = containerRect.top - windowHeight / 2;\n    const endPoint = containerRect.bottom - windowHeight / 2;\n\n    let progress = 0;\n\n    if (startPoint <= 0 && endPoint >= 0) {\n      const scrolled = Math.abs(startPoint);\n      const visibleDistance = containerRect.height;\n      progress = (scrolled / visibleDistance) * 100;\n      progress = Math.min(Math.max(progress, 0), 100);\n    } else if (endPoint < 0) {\n      progress = 100;\n    } else {\n      progress = 0;\n    }\n\n    progressBar.style.height = `${progress}%`;\n  }\n\n  window.addEventListener('scroll', updateProgressBar);\n  window.addEventListener('resize', updateProgressBar);\n  updateProgressBar();\n});\n\nfunction animateCards() {\n  const cards = document.querySelectorAll('.card');\n  const triggerCard = window.innerHeight * 0.8;\n  const labels = document.querySelectorAll('.label');\n  const triggerLabel = window.innerHeight / 2;\n\n  if(labels.length > 0) {\n    labels.forEach(label => {\n      const labelTop = label.getBoundingClientRect().top;\n\n      if (labelTop < triggerLabel) {\n        label.classList.add('filled');\n      } else {\n        label.classList.remove('filled');\n      }\n    });\n  }\n\n  if(cards.length > 0) {\n    cards.forEach(card => {\n      const cardTop = card.getBoundingClientRect().top;\n      \n      if (cardTop < triggerCard) {\n        card.classList.add('visible');\n      } else {\n        card.classList.remove('visible');\n      }\n    });\n  }\n}\n\nwindow.addEventListener('load', animateCards);\nwindow.addEventListener('scroll', animateCards);"],"names":["animateCards","cards","document","querySelectorAll","triggerCard","window","innerHeight","labels","triggerLabel","length","forEach","label","labelTop","getBoundingClientRect","top","classList","add","remove","card","cardTop","addEventListener","container","querySelector","progressBar","getElementById","updateProgressBar","containerHeght","offsetHeight","firstCard","numericValue","parseInt","getComputedStyle","marginBottom","style","height","containerRect","windowHeight","startPoint","endPoint","bottom","progress","Math","min","max","scrolled","abs"],"version":3,"file":"test-app.65d2b486.js.map"}